General TODO list for MORSE
---------------------------

=========================
 TARGETS FOR RELEASE 0.4
=========================

General
-------

- Switch to Blender 2.58/Python 3.2
- Update robotpkg packages

- use the Python logging interface -> Severin
- move away all project/scenario specific files from MORSE core (create
  dedicated repositories for those) -> superseeded by next target

Components
----------
- Properly implement the "human" as a robot: Change the script in object oriented form -> Gilberto
- allow scenarii + equipped robots  described in Python instead of Blender files -> everyone
- Then, fix the project tree layout -> Arnaud


=================
   TARGET 0.5
Deadline: 15 Sept.
==================

- Multinode support (socket-based, possibly HLA): define the procotol that allows to
  dispatch various robots on several machines running blender, while maintaining
  the world state consistent within these machines.
- Introduce a mean to externally control time, by pacing the game engine time
  (e.g. through a socket, cf mail from Benoit Bolsee on Jan. the 10th in
  blender-robotics). Add support to pause the simulation.
- Export simulator time
- Fixed the physical properties of robot to enable velocity control (cf commit 8503c9)
- define a method to select the control of robots using position or velocity


Middleware
----------

- add support for services through ROS middleware

Architecture
------------

- make clear how components access other components? (eg: the cameras need the
  position of the robot) -> need refinements: what is the general use case?

Simulation supervision
----------------------
- Introduce means to define scenarios with controlled dynamic events (through
  requests and/or a simple scripting API). Requires a notion of timeline (in
  the API? in the simulator?)

Components
----------

- Motion capture poster: MORSE should be able to simulate a motion capture setup
by allowing the designer to paste markers in the scene whose position will be
exported

- "Point Cloud" sensors: generate 3D depth images to simulate either
stereovision at an abstract level or various Lidars. Make it generic: export
depth data (openGL z-buffer?), define mofifiers that sample the data according
to a given sensor geometry.

- Create a Generic Vehicule Robot, as a base for Hummer robot

================
 OTHERS and MISC
================

GUI
---

- Add a GUI for a the scenario configuration -> to be refined to use the Python API for scene creation
- Define a user interface to specify a scenario -> to be refined to use the Python API for scene creation

Coding style
------------

- every simple function must have a function comment ( """ ... """)
- Change the names of modules, variables, classes, etc. to comply with the
  naming conventions in: http://www.python.org/dev/peps/pep-0008/
- Change the names of objects in .blend file, so that they can be dynamically added using a Python script. Give Specific prefixes to the parent component and other linkable objects

Frame transformations
---------------------

- Representation of all the frames defined within a robot (one frame per sensor,
  one robot frame). 
- Geo-referenced frames for initial geographic data (define and store a frame
  transformation between the Blender reference frame and an abosolute
  geo-reference frame)
- Camera geometry: associate a projection matrix to each camera
- Respect the usual standards (e.g. for cameras), define and document the other
  choices

User-interface
--------------
- Graphic tree of logic components and their interaction (no meshes, ... )

Architecture
------------
- unified time management ("what if we want to simulate at 2X?")

Simulated component
-------------------
- Simulation of wireless communication between robots: delay, lost of connection, noise...

Linking issues
--------------
- when properties are added in linked components (eg, cameras),
the new properties don't show up in the scene that import these components.

- A lot of room for improvement regarding the general process of linking a robot
component into a scene. Issue with making stuff 'local', lacking a good GUI, when
opening a .blend file, it's not clear what should be imported...

Other stuff 
-----------
- Create a list with the comparison against Gazebo, and why MORSE is better/worse in particular situations

- find a way to limit the framerate of the simulation, without lowering the physics clock (only the display).
  This would allow to free CPU for other application while the simulator is running.
- commit policy

Rosace Project
--------------
- Add timeline of events in the simulation
- Add init script that places the robots and victims specified in a XML file

