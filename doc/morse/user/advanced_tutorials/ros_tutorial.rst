ROS-navigation tutorial (experimental)
======================================

This tutorial shows how to use the ROS navigation stack to navigate a robot in MORSE.

Setup
-----

You need to have a working installation of ROS Diamondback and also have the python3-compatible stacks for MORSE-ROS installed. You can find
information about this here:  :doc:`installation notes <../installation>`

You should also be familiar with the basic usage of ROS and how to use TF and the ROS navigation stack. You should also know about launchfiles and topic remapping as well as the robot state publisher. Also experience with RVIZ are of advantage. Tutorials on all of those topics can be found on http://www.ros.org.

To create the TF-tree, you have to write a tf-broadcaster and an installation script for the ROS navigation stack. You can download an example implementation here:

First create a folder for your MORSE-ROS stack and make sure, it is in your ROS_PACKAGE_PATH:

``mkdir morse_ros``
``cd morse_ros``

Now init a git repository and checkout the morse_ros stack for the navigation tutorial:

``git init``
``git remote add -t tutorials -f origin git://github.com/kargm/morse_ros.git``
``git checkout tutorials``

If you now type ``roscd morse_ros``, you should get to your morse_ros-stack. If you donÂ´t, the morse-ros stack is NOT in your ROS_PACKAGE_PATH.

Finally rosmake the stack: 

``rosmake morse_ros``

Configuring the scenario
------------------------

There is already a completely configured scenario in ``examples/morse/scenarii/ROS_tutorial1_navstack.blend``. Open this file in MORSE.

For the navigation-stack to work, you need your robot (in our example the Jido robot) equipped with the following components:

#. Pose sensor
#. IMU
#. Motion controller
#. Laserscanner
#. Joint state publisher (this is needed because we are also working with non-fixed joints here. If the URDF of your robot only has fixed joints, you will not need this coponent. TODO: Write tutorial for ATRV)

More information about how to equip your robot with those components can be found in the MORSE beginner tutorials. The components are linked with the ROS middleware. 

Linking the MORSE-ROS topics with the ROS navigation stack.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The ROS navigation stack expects a tf-tree of the robot and the map as well as the pose of the robot and its speed. The morse_ros-package includes a tf-broadcaster that reads the values of the values of the Pose Sensor and the IMU sensor and posts the messages on the topic needed by the ROS navigation stack. It also sets the odom-TF-frame to the initial robot's starting position. The TF-tree of the robot is created by the odom frame, map frame and a urdf of the robot posted the robot state publisher. The URDF of the Jido robot can be found in the ROS package ``morse_tf`` in the folder ``urdf``. The robot state publisher also needs the jointstates of the robot which are exported by the ``jido_posture`` component.

NOTE: We are not going to deep into the ROS navigation stack, TF and the robot state publisher here. It is strongly recommened to do the tutorials on that topic on http://www.ros.org! 

Starting the navigation
+++++++++++++++++++++++

Now we can finally start our navigation-simulation

#. Hit ``P`` in MORSE to start the simulation
#. Start a roscore by typing ``roscore`` (This step is optional but recommended)
#. Type ``roslaunch morse_2dnav 2dnav_movebase.launch``. This should bring up all needed nodes and topics. 
#. You can now start RVIZ in a seperate terminal by ``rosrun rviz rviz`` and see if everything is fine by visualizing for example the map, laserscan, odometry, etc. By using "move_base_simple/goal" as 2D Nav Goal (you can edit the 2D Nav Goal in the Windows "Tool Properties"), you can set a navigation-goal the robot should navigate to by clicking on the map. Your robot should now start to navigate towards that point on the map.


Notes
+++++

The morse_2dnav package already includes a 2D gridmap of the envirment. This map has been generated by using the simulated SICK-laserscanner in MORSE and ROS GMapping. Watch out for a tutorial soon.
