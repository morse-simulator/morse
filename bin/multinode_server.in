#! @PYTHON_EXECUTABLE@
""" Simulation Manager that coordinates multiple MORSE nodes.

TEST
====

import asyncore
import threading
from pymorse import StreamJSON
node_stream = StreamJSON('localhost', 65000)
async_thread = threading.Thread( target = asyncore.loop, kwargs = {'timeout': .1} )
async_thread.start()
node_stream.publish(['node1', {'robot1': [[0, 0, 0], [0, 0, 0]]}])
node_stream.publish(['node1', {'robot2': [[0, 0, 1], [1, 0, 0]]}])
node_stream.publish(['node1', {'robot3': [[0, 1, 0], [0, 1, 0]]}])
node_stream.last()
node_stream.close()
"""

import socket
import logging
import asyncore

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.addHandler( logging.StreamHandler() )

from pymorse import StreamJSON

class MorseMultinode(asyncore.dispatcher):
    def __init__(self, host='0.0.0.0', port=65000):
        logger.debug("Starting Morse Multinode on %s:%i" % (str(host), port))
        asyncore.dispatcher.__init__(self)
        #self.nodes = {}
        self.robots = {}
        self.create_socket(family=socket.AF_INET, type=socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accepted(self, sock, addr):
        logger.info("Incoming connection from %s" % repr(addr))
        #self.nodes[addr] = MorseNode(sock, self)
        MorseNode(sock, self)

class MorseNode(object):
    def __init__(self, sock, master):
        self._stream = StreamJSON(sock=sock)
        self._master = master
        self._stream.subscribe(self.on_message)

    def on_message(self, message):
        client_name   = message[0]
        client_robots = message[1]
        try:
            self.handle_robots(client_robots)
        except Exception as e:
            logger.warning("error while processing data from %s" % client_name)

    def handle_robots(self, client_robots):
        # Build/update the list of robots from
        #  the data received from all the clients
        for robot_name, robot_position in client_robots.items():
            self._master.robots[robot_name] = robot_position

        # (self._master.robots - client_robots.keys())
        # do not send back the data we just recieved
        data = self._master.robots.copy()
        for robot in client_robots.keys():
            del data[robot] # faster than: data.pop(robot)
        self._stream.publish(data)

def main(argv):
    serv = MorseMultinode()
    try:
        asyncore.loop(timeout=0.01)
    except KeyboardInterrupt:
        logger.info("Quit (Ctrl+C)")
    finally:
        logger.info("Closing all connections")
        asyncore.close_all()
    logger.info("Bye!")
    return 0

if __name__ == '__main__':
    import sys
    sys.exit(main(sys.argv))
